Δημόκριτος Κολίτσος sdi1900085
Παναγιώτα Τσίχλη sdi1900199

HEAP
HP_info -> η δομή hp_info κρατάει τον αναγνωριστικό αριθμό ανοίγματος αρχείου(filedesc),
το id του τελευταίου block(ώστε να είναι εύκολα προσπελάσιμο στην insertentry),
τη χωρητικότητα του block(block capacity) καθώς και το block στο οποιο είναι αποθηκευμένη.
HP_block_info -> η δομή HP_block_info αφορά κάθε block και περιέχει τον αριθμό των
εγγραφών στο block καθώς και έναν δείκτη στο επόμενο block.
Αρχικά στο αρχείο hp_file.c έχουν πρσθέτει τρεις επιπλέον συναρτήσεις η
add_to_newblock, add_to_existingblock και η print_records οι οποίες χρησιμοποιούνται στην
insertentry και στην getallrecords.
HP_Createfile -> Στην συγκεκριμένη υλοπίηση η HP_Createfile δημιουργεί ένα αρχείο καθώς
και δημιουργεί μία δομή HP_info και την αποθηκεύει στο block 0.
HP_Openfile -> H HP_openfile με την σειρά της ανοίγει το αρχείο με όνομα filename και
αρχικοποιεί τα πεδία της δομής HP_info* info. Τέλος αποθηκεύει τα μεταδεδομένα του
αρχείου στο 1ο block και επιστρέφει το struct.
HP_InsertEntry -> H HP_InsertEntry αρχικά ελέγχει αν το τελευταίο block είναι το block 0 και
αν ναι δημιουργεί ένα νέο μέσω της add_to_newblock.
Σε αλλη περίπτωση καλεί την add_to_existingblock και αυτη ελέγχει αν το τελευταίο block
που έχει χωράει άλλη εγγραφή και αν ναι την εισάγει και αν όχι δημιουργεί το επόμενο block
και κανει την εισαγωγή της εγγραφής στο νεο( Εφόσον δεν ξεπερνάμε το
BF_BUFFER_SIZE)
HP_GetAllEntries ->.H Getallentries δίνει σειριακά τα blocks στην print_records η οποία
ελέγχει αν το id των εγγραφών που βρίσκονται στο block είναι ίσο με το ζητούμενο και αν ναι
εκτυπώνει την εγγραφή.
δημιουργεία εκτελέσιμου: make hp
εκτέλεση: make run_hp

HASH TABLE
HT_info -> η δομή ht_info κρατάει τον αναγνωριστικό αριθμό ανοίγματος αρχείου(filedesc),
το πλήθος των “κάδων” του αρχείου κατακερματισμού numBuckets,
τον πίνακα κατακερματισμού hash_table ο οποίος είναι ένας πίνακας ints όπου 
η θέση του int το bucket και το int το μπλοκ στο οποίο θα αποθηεύονται τα στοιχεία του bucket
τη χωρητικότητα του block(block capacity) καθώς και το block στο οποιο είναι αποθηκευμένη.
HT_block_info -> η δομή HP_block_info αφορά κάθε block και περιέχει τον αριθμό των
εγγραφών στο block καθώς και έναν δείκτη στο επόμενο block.
Αρχικά στο αρχείο ht_file.c έχουν πρσθέτει τρεις επιπλέον συναρτήσεις η
add_record_to_newBlock που αρχικοποιεί ένα block και του προσθέτει ένα record, 
add_record_to_existingBlock που προσθέτει ένα record στο block εφόσον χωράει 
αλλίως το προσθέτει σε block υπερχείλισης (εάν δεν υπάρχει ορίζει ένα)
και η print_records που εμφανίζει τα στοιχεία των records με το συγκεκριμένο id  οι οποίες χρησιμοποιούνται στην
insertentry και στην getallrecords.
HT_Createfile -> Στην συγκεκριμένη υλοπίηση δημιουργεί ένα αρχείο κai αποθηκεύει στο block 0
τον αριθμό των μπλοκσ για να αποθηκευτεί μετέπειτα στην δομή ht_info.
HT_Openfile -> H HT_openfile με την σειρά της ανοίγει το αρχείο με όνομα filename και
αρχικοποιεί τα πεδία της δομής HT_info* info. Τέλος αποθηκεύει τα μεταδεδομένα του
αρχείου στο 1ο block και επιστρέφει το struct.
HT_InsertEntry -> H HT_InsertEntry αρχικά χασάρει το id του record και έπειτα το προσθέτει
στο αντίστοιχο μπλοκ που αντιστοιχεί στο bucket στο οποίο χασάρει
HT_GetAllEntries ->.H Getallentries βρίσκει τα blocks στα οποία αντιστοιχεί το id του value
και τα εκτυπώνει
δημιουργεία εκτελέσιμου: make ht
εκτέλεση: make run_ht

SECONDARY HASH TABLE
Η υλοπίηση του sht είναι πολύ παρόμοια με την υλοπίηση του ht με τη διαφορά ότι αποθηκεύει
Entry εγγραές αντί για Record οι οποίες κρατάνε το name του record και το block id στο οποίο
το record αποθηκεύεται στην ht και χασάρει με βάση το name και όχι του id
δημιουργεία εκτελέσιμου: make sht
εκτέλεση: make run_sht

STATISTICS
Τρέχει μια δομή που εμφανίζει στατιστηκά για τα αρχεία κατακερματισμού
δημιουργεία εκτελέσιμου: make statistics
εκτέλεση: make run_statistics
